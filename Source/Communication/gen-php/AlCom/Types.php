<?php
namespace AlCom;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * Structs are the basic complex data structures. They are comprised of fields
 * which each have an integer identifier, a type, a symbolic name, and an
 * optional default value.
 * 
 * Fields can be declared "optional", which ensures they will not be included
 * in the serialized output if they aren't set.  Note that this requires some
 * manual management in some languages.
 */
class SimpleRequest {
  static $_TSPEC;

  /**
   * @var int
   */
  public $groupID = null;
  /**
   * @var int
   */
  public $elementID = null;
  /**
   * @var bool
   */
  public $state = null;
  /**
   * @var bool
   */
  public $group = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'groupID',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'elementID',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'state',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'group',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['groupID'])) {
        $this->groupID = $vals['groupID'];
      }
      if (isset($vals['elementID'])) {
        $this->elementID = $vals['elementID'];
      }
      if (isset($vals['state'])) {
        $this->state = $vals['state'];
      }
      if (isset($vals['group'])) {
        $this->group = $vals['group'];
      }
    }
  }

  public function getName() {
    return 'SimpleRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->elementID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->state);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->group);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SimpleRequest');
    if ($this->groupID !== null) {
      $xfer += $output->writeFieldBegin('groupID', TType::I32, 1);
      $xfer += $output->writeI32($this->groupID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->elementID !== null) {
      $xfer += $output->writeFieldBegin('elementID', TType::I32, 2);
      $xfer += $output->writeI32($this->elementID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->state !== null) {
      $xfer += $output->writeFieldBegin('state', TType::BOOL, 3);
      $xfer += $output->writeBool($this->state);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->group !== null) {
      $xfer += $output->writeFieldBegin('group', TType::BOOL, 4);
      $xfer += $output->writeBool($this->group);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ComTask {
  static $_TSPEC;

  /**
   * @var int
   */
  public $startTime = null;
  /**
   * @var int
   */
  public $endTime = null;
  /**
   * @var int
   */
  public $periodicity = null;
  /**
   * @var int
   */
  public $duration = null;
  /**
   * @var \AlCom\SimpleRequest[]
   */
  public $startRequests = null;
  /**
   * @var \AlCom\SimpleRequest[]
   */
  public $endRequests = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'startTime',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'endTime',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'periodicity',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'duration',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'startRequests',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AlCom\SimpleRequest',
            ),
          ),
        6 => array(
          'var' => 'endRequests',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\AlCom\SimpleRequest',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['startTime'])) {
        $this->startTime = $vals['startTime'];
      }
      if (isset($vals['endTime'])) {
        $this->endTime = $vals['endTime'];
      }
      if (isset($vals['periodicity'])) {
        $this->periodicity = $vals['periodicity'];
      }
      if (isset($vals['duration'])) {
        $this->duration = $vals['duration'];
      }
      if (isset($vals['startRequests'])) {
        $this->startRequests = $vals['startRequests'];
      }
      if (isset($vals['endRequests'])) {
        $this->endRequests = $vals['endRequests'];
      }
    }
  }

  public function getName() {
    return 'ComTask';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->startTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->endTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->periodicity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->startRequests = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \AlCom\SimpleRequest();
              $xfer += $elem5->read($input);
              $this->startRequests []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->endRequests = array();
            $_size6 = 0;
            $_etype9 = 0;
            $xfer += $input->readListBegin($_etype9, $_size6);
            for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
            {
              $elem11 = null;
              $elem11 = new \AlCom\SimpleRequest();
              $xfer += $elem11->read($input);
              $this->endRequests []= $elem11;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ComTask');
    if ($this->startTime !== null) {
      $xfer += $output->writeFieldBegin('startTime', TType::I32, 1);
      $xfer += $output->writeI32($this->startTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endTime !== null) {
      $xfer += $output->writeFieldBegin('endTime', TType::I32, 2);
      $xfer += $output->writeI32($this->endTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->periodicity !== null) {
      $xfer += $output->writeFieldBegin('periodicity', TType::I32, 3);
      $xfer += $output->writeI32($this->periodicity);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->duration !== null) {
      $xfer += $output->writeFieldBegin('duration', TType::I32, 4);
      $xfer += $output->writeI32($this->duration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->startRequests !== null) {
      if (!is_array($this->startRequests)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('startRequests', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->startRequests));
        {
          foreach ($this->startRequests as $iter12)
          {
            $xfer += $iter12->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->endRequests !== null) {
      if (!is_array($this->endRequests)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('endRequests', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->endRequests));
        {
          foreach ($this->endRequests as $iter13)
          {
            $xfer += $iter13->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


