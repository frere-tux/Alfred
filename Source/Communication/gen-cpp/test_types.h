/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef test_TYPES_H
#define test_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace AlCom {

typedef int32_t InterID;

class SimpleRequest;

typedef struct _SimpleRequest__isset {
  _SimpleRequest__isset() : interID(false), state(false) {}
  bool interID :1;
  bool state :1;
} _SimpleRequest__isset;

class SimpleRequest {
 public:

  SimpleRequest(const SimpleRequest&);
  SimpleRequest& operator=(const SimpleRequest&);
  SimpleRequest() : interID(0), state(0) {
  }

  virtual ~SimpleRequest() throw();
  InterID interID;
  bool state;

  _SimpleRequest__isset __isset;

  void __set_interID(const InterID val);

  void __set_state(const bool val);

  bool operator == (const SimpleRequest & rhs) const
  {
    if (!(interID == rhs.interID))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const SimpleRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SimpleRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SimpleRequest &a, SimpleRequest &b);

inline std::ostream& operator<<(std::ostream& out, const SimpleRequest& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
