/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "AlCom_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace AlCom {


SimpleRequest::~SimpleRequest() throw() {
}


void SimpleRequest::__set_groupID(const GroupID val) {
  this->groupID = val;
}

void SimpleRequest::__set_elementID(const ElementID val) {
  this->elementID = val;
}

void SimpleRequest::__set_state(const bool val) {
  this->state = val;
}

void SimpleRequest::__set_group(const bool val) {
  this->group = val;
}

uint32_t SimpleRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->groupID);
          this->__isset.groupID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->elementID);
          this->__isset.elementID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SimpleRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SimpleRequest");

  xfer += oprot->writeFieldBegin("groupID", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->groupID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("elementID", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->elementID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("state", ::apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->state);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_BOOL, 4);
  xfer += oprot->writeBool(this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SimpleRequest &a, SimpleRequest &b) {
  using ::std::swap;
  swap(a.groupID, b.groupID);
  swap(a.elementID, b.elementID);
  swap(a.state, b.state);
  swap(a.group, b.group);
  swap(a.__isset, b.__isset);
}

SimpleRequest::SimpleRequest(const SimpleRequest& other0) {
  groupID = other0.groupID;
  elementID = other0.elementID;
  state = other0.state;
  group = other0.group;
  __isset = other0.__isset;
}
SimpleRequest& SimpleRequest::operator=(const SimpleRequest& other1) {
  groupID = other1.groupID;
  elementID = other1.elementID;
  state = other1.state;
  group = other1.group;
  __isset = other1.__isset;
  return *this;
}
void SimpleRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SimpleRequest(";
  out << "groupID=" << to_string(groupID);
  out << ", " << "elementID=" << to_string(elementID);
  out << ", " << "state=" << to_string(state);
  out << ", " << "group=" << to_string(group);
  out << ")";
}

} // namespace
